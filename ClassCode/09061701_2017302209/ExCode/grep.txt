
Transport Layer Security
From Wikipedia, the free encyclopedia
Transport Layer Security (TLS) – and its predecessor, Secure Sockets Layer (SSL), which is now prohibited from use – are cryptographic protocols that provide communications security over a computer network.[1] Several versions of the protocols find widespread use in applications such as web browsing, email, Internet faxing, instant messaging, and voice over IP (VoIP). Websites are able to use TLS to secure all communications between their servers and web browsers.

The TLS protocol aims primarily to provide privacy and data integrity between two communicating computer applications.[1]:3 When secured by TLS, connections between a client (e.g., a web browser) and a server (e.g., wikipedia.org) have one or more of the following properties:

The connection is private (or secure) because symmetric cryptography is used to encrypt the data transmitted. The keys for this symmetric encryption are generated uniquely for each connection and are based on a shared secret negotiated at the start of the session (see § TLS handshake). The server and client negotiate the details of which encryption algorithm and cryptographic keys to use before the first byte of data is transmitted (see § Algorithm below). The negotiation of a shared secret is both secure (the negotiated secret is unavailable to eavesdroppers and cannot be obtained, even by an attacker who places themselves in the middle of the connection) and reliable (no attacker can modify the communications during the negotiation without being detected).
The identity of the communicating parties can be authenticated using public-key cryptography. This authentication can be made optional, but is generally required for at least one of the parties (typically the server).
The connection ensures integrity because each message transmitted includes a message integrity check using a message authentication code to prevent undetected loss or alteration of the data during transmission.:3
In addition to the properties above, careful configuration of TLS can provide additional privacy-related properties such as forward secrecy, ensuring that any future disclosure of encryption keys cannot be used to decrypt any TLS communications recorded in the past.[2]

TLS supports many different methods for exchanging keys, encrypting data, and authenticating message integrity (see § Algorithm below). As a result, secure configuration of TLS involves many configurable parameters, and not all choices provide all of the privacy-related properties described in the list above (see the § Key exchange (authentication), § Cipher security, and § Data integrity tables).

Attempts have been made to subvert aspects of the communications security that TLS seeks to provide and the protocol has been revised several times to address these security threats (see § Security). Developers of web browsers have also revised their products to defend against potential security weaknesses after these were discovered (see TLS/SSL support history of web browsers).[3]

The TLS protocol comprises two layers: the TLS record and the TLS handshake protocols.

TLS is a proposed Internet Engineering Task Force (IETF) standard, first defined in 1999 and updated in RFC 5246 (August 2008) and RFC 6176 (March 2011). It builds on the earlier SSL specifications (1994, 1995, 1996) developed by Netscape Communications[4] for adding the HTTPS protocol to their Navigator web browser.

Contents
1	Description
2	History and development
2.1	Secure Network Programming
2.2	SSL 1.0, 2.0 and 3.0
2.3	TLS 1.0
2.4	TLS 1.1
2.5	TLS 1.2
2.6	TLS 1.3 (draft)
3	Digital certificates
3.1	Certificate authorities
4	Algorithm
4.1	Key exchange or key agreement
4.2	Cipher
4.3	Data integrity
5	Applications and adoption
5.1	Websites
5.2	Web browsers
5.3	Libraries
5.4	Other uses
6	Security
6.1	SSL 2.0
6.2	SSL 3.0
6.3	TLS
6.4	Attacks against TLS/SSL
6.4.1	Renegotiation attack
6.4.2	Downgrade attacks: FREAK attack and Logjam attack
6.4.3	Cross-protocol attacks: DROWN
6.4.4	BEAST attack
6.4.5	CRIME and BREACH attacks
6.4.6	Timing attacks on padding
6.4.7	POODLE attack
6.4.8	RC4 attacks
6.4.9	Truncation attack
6.4.10	Unholy PAC attack
6.4.11	Sweet32 attack
6.4.12	Implementation errors: Heartbleed bug, BERserk attack, Cloudflare bug
6.4.13	Survey of websites vulnerable to attacks
6.5	Forward secrecy
6.6	Dealing with man-in-the-middle attacks
6.6.1	Certificate pinning
6.6.2	Perspectives Project
6.6.3	DNSChain
7	Protocol details
7.1	TLS handshake
7.1.1	Basic TLS handshake
7.1.2	Client-authenticated TLS handshake
7.1.3	Resumed TLS handshake
7.1.3.1	Session IDs
7.1.3.2	Session tickets
7.2	TLS record
7.2.1	Handshake protocol
7.2.2	Alert protocol
7.2.3	ChangeCipherSpec protocol
7.2.4	Application protocol
8	Support for name-based virtual servers
9	Standards
9.1	Primary standards
9.2	Extensions
9.3	Informational RFCs
10	See also
11	References
12	Further reading
13	External links
Description[edit]
Client-server applications use the TLS protocol to communicate across a network in a way designed to prevent eavesdropping and tampering.

Since applications can communicate either with or without TLS (or SSL), it is necessary for the client to indicate to the server the setup of a TLS connection.[5] One of the main ways of achieving this is to use a different port number for TLS connections, for example port 443 for HTTPS. Another mechanism is for the client to make a protocol-specific request to the server to switch the connection to TLS; for example, by making a STARTTLS request when using the mail and news protocols.

Once the client and server have agreed to use TLS, they negotiate a stateful connection by using a handshaking procedure.[6] The protocols use a handshake with an asymmetric cipher to establish not only cipher settings but also a session-specific shared key with which further communication is encrypted using a symmetric cipher. During this handshake, the client and server agree on various parameters used to establish the connection's security:

The handshake begins when a client connects to a TLS-enabled server requesting a secure connection and the client presents a list of supported cipher suites (ciphers and hash functions).
From this list, the server picks a cipher and hash function that it also supports and notifies the client of the decision.
The server usually then provides identification in the form a digital certificate. The certificate contains the server name, the trusted certificate authority (CA) that vouches for the authenticity of the certificate, and the server's public encryption key.
The client confirms the validity of the certificate before proceeding.
To generate the session keys used for the secure connection, the client either:
encrypts a random number with the server's public key and sends the result to the server (which only the server should be able to decrypt with its private key); both parties then use the random number to generate a unique session key for subsequent encryption and decryption of data during the session
uses Diffie–Hellman key exchange to securely generate a random and unique session key for encryption and decryption that has the additional property of forward secrecy: if the server's private key is disclosed in future, it cannot be used to decrypt the current session, even if the session is intercepted and recorded by a third party.
This concludes the handshake and begins the secured connection, which is encrypted and decrypted with the session key until the connection closes. If any one of the above steps fails, then the TLS handshake fails and the connection is not created.

TLS and SSL do not fit neatly into any single layer of the OSI model or the TCP/IP model.[7][8] TLS runs "on top of some reliable transport protocol (e.g., TCP),"[9] which would imply that it is above the transport layer. It serves encryption to higher layers, which is normally the function of the presentation layer. However, applications generally use TLS as if it were a transport layer,[7][8] even though applications using TLS must actively control initiating TLS handshakes and handling of exchanged authentication certificates.[9]

History and development[edit]
Defined
Protocol	Year
SSL 1.0	n/a
SSL 2.0	1995
SSL 3.0	1996
TLS 1.0	1999
TLS 1.1	2006
TLS 1.2	2008
TLS 1.3	TBD
Secure Network Programming[edit]
Early research efforts towards transport layer security included the Secure Network Programming (SNP) application programming interface (API), which in 1993 explored the approach of having a secure transport layer API closely resembling Berkeley sockets, to facilitate retrofitting pre-existing network applications with security measures.[10]

SSL 1.0, 2.0 and 3.0[edit]
Netscape developed the original SSL protocols.[11] Version 1.0 was never publicly released because of serious security flaws in the protocol; version 2.0, released in February 1995, contained a number of security flaws which necessitated the design of version 3.0.[12] Released in 1996, SSL version 3.0 represented a complete redesign of the protocol produced by Paul Kocher working with Netscape engineers Phil Karlton and Alan Freier, with a reference implementation by Christopher Allen and Tim Dierks of Consensus Development. Newer versions of SSL/TLS are based on SSL 3.0. The 1996 draft of SSL 3.0 was published by IETF as a historical document in RFC 6101.

Taher Elgamal, chief scientist at Netscape Communications from 1995 to 1998, has been described as the "father of SSL".[13][14]

In 2014, SSL 3.0 was found to be vulnerable to the POODLE attack that affects all block ciphers in SSL; and RC4, the only non-block cipher supported by SSL 3.0, is also feasibly broken as used in SSL 3.0.[15]

SSL 2.0 was prohibited in 2011 by RFC 6176, and SSL 3.0 was also later prohibited in June 2015 by RFC 7568.

TLS 1.0[edit]
TLS 1.0 was first defined in RFC 2246 in January 1999 as an upgrade of SSL Version 3.0, and written by Christopher Allen and Tim Dierks of Consensus Development. As stated in the RFC, "the differences between this protocol and SSL 3.0 are not dramatic, but they are significant enough to preclude interoperability between TLS 1.0 and SSL 3.0". TLS 1.0 does include a means by which a TLS implementation can downgrade the connection to SSL 3.0, thus weakening security.[16]:1–2

TLS 1.1[edit]
TLS 1.1 was defined in RFC 4346 in April 2006.[17] It is an update from TLS version 1.0. Significant differences in this version include:

Added protection against cipher-block chaining (CBC) attacks.
The implicit initialization vector (IV) was replaced with an explicit IV.
Change in handling of padding errors.
Support for IANA registration of parameters.[16]:2
TLS 1.2[edit]
TLS 1.2 was defined in RFC 5246 in August 2008. It is based on the earlier TLS 1.1 specification. Major differences include:

The MD5-SHA-1 combination in the pseudorandom function (PRF) was replaced with SHA-256, with an option to use cipher suite specified PRFs.
The MD5-SHA-1 combination in the finished message hash was replaced with SHA-256, with an option to use cipher suite specific hash algorithms. However the size of the hash in the finished message must still be at least 96 bits.[18]
The MD5-SHA-1 combination in the digitally signed element was replaced with a single hash negotiated during handshake, which defaults to SHA-1.
Enhancement in the client's and server's ability to specify which hashes and signature algorithms they accept.
Expansion of support for authenticated encryption ciphers, used mainly for Galois/Counter Mode (GCM) and CCM mode of Advanced Encryption Standard encryption.
TLS Extensions definition and Advanced Encryption Standard cipher suites were added.[16]:2
All TLS versions were further refined in RFC 6176 in March 2011, removing their backward compatibility with SSL such that TLS sessions never negotiate the use of Secure Sockets Layer (SSL) version 2.0.

TLS 1.3 (draft)[edit]
As of July 2017, TLS 1.3 is a working draft, and details are provisional and incomplete.[19][20] It is based on the earlier TLS 1.2 specification. Major differences from TLS 1.2 include:

Removing support for weak and lesser-used named elliptic curves (see elliptic-curve cryptography)
Removing support for MD5 and SHA-224 cryptographic hash functions
Requiring digital signatures even when a previous configuration is used
Integrating HKDF and the semi-ephemeral DH proposal
Replacing resumption with PSK and tickets
Supporting 1-RTT handshakes and initial support for 0-RTT (see round-trip delay time)
Dropping support for many insecure or obsolete features including compression, renegotiation, non-AEAD ciphers, static RSA and static DH key exchange, custom DHE groups, point format negotiation, Change Cipher Spec protocol, Hello message UNIX time, and the length field AD input to AEAD ciphers
Prohibiting SSL or RC4 negotiation for backwards compatibility
Integrating use of session hash
Deprecating use of the record layer version number and freezing the number for improved backwards compatibility
Moving some security-related algorithm details from an appendix to the specification and relegating ClientKeyShare to an appendix
Addition of the ChaCha20 stream cipher with the Poly1305 message authentication code
Addition of the Ed25519 and Ed448 digital signature algorithms
Addition of the x25519 and x448 key exchange protocols
Network Security Services (NSS), the cryptography library developed by Mozilla and used by its web browser Firefox, enabled TLS 1.3 by default in February 2017.[21] TLS 1.3 was added to Firefox with the release of Version 52 but is disabled by default due to compatibility issues for some users.[22]

Google Chrome set TLS 1.3 as the default version for a short time in 2017. It then removed it as the default, due to incompatible middleboxes such as Blue Coat web proxies.[23]

Pale Moon enabled the use of TLS 1.3 as of version 27.4, released in July 2017.[24] During the IETF 100 Hackathon which took place in Singapore, The TLS Group worked on adapting Open Source applications to use TLS 1.3.[25][26] The TLS group was made up of individuals from Japan, United Kingdom, and Mauritius via the hackers.mu team.[26]

Digital certificates[edit]
Main article: Public key certificate
A digital certificate certifies the ownership of a public key by the named subject of the certificate, and indicates certain expected usages of that key. This allows others (relying parties) to rely upon signatures or on assertions made by the private key that corresponds to the certified public key.

Certificate authorities[edit]
Main article: Certificate authority
TLS typically relies on a set of trusted third-party certificate authorities to establish the authenticity of certificates. Trust is usually anchored in a list of certificates distributed with user agent software,[27] and can be modified by the relying party.

According to Netcraft, who monitors active TLS certificates, the market-leading CA has been Symantec since the beginning of their survey (or VeriSign before the authentication services business unit was purchased by Symantec). Symantec currently accounts for just under a third of all certificates and 44% of the valid certificates used by the 1 million busiest websites, as counted by Netcraft.[28]

As a consequence of choosing X.509 certificates, certificate authorities and a public key infrastructure are necessary to verify the relation between a certificate and its owner, as well as to generate, sign, and administer the validity of certificates. While this can be more convenient than verifying the identities via a web of trust, the 2013 mass surveillance disclosures made it more widely known that certificate authorities are a weak point from a security standpoint, allowing man-in-the-middle attacks (MITM).[29][30]

Algorithm[edit]
See also: Cipher suite
Key exchange or key agreement[edit]
Before a client and server can begin to exchange information protected by TLS, they must securely exchange or agree upon an encryption key and a cipher to use when encrypting data (see § Cipher). Among the methods used for key exchange/agreement are: public and private keys generated with RSA (denoted TLS_RSA in the TLS handshake protocol), Diffie–Hellman (TLS_DH), ephemeral Diffie–Hellman (TLS_DHE), Elliptic Curve Diffie–Hellman (TLS_ECDH), ephemeral Elliptic Curve Diffie–Hellman (TLS_ECDHE), anonymous Diffie–Hellman (TLS_DH_anon),[1] pre-shared key (TLS_PSK)[31] and Secure Remote Password (TLS_SRP).[32]

The TLS_DH_anon and TLS_ECDH_anon key agreement methods do not authenticate the server or the user and hence are rarely used because those are vulnerable to man-in-the-middle attack. Only TLS_DHE and TLS_ECDHE provide forward secrecy.

Public key certificates used during exchange/agreement also vary in the size of the public/private encryption keys used during the exchange and hence the robustness of the security provided. In July 2013, Google announced that it would no longer use 1024 bit public keys and would switch instead to 2048 bit keys to increase the security of the TLS encryption it provides to its users because the encryption strength is directly related to the key size.[3][33]


Key exchange/agreement and authentication
Algorithm	SSL 2.0	SSL 3.0	TLS 1.0	TLS 1.1	TLS 1.2	TLS 1.3
(Draft)	Status
RSA	Yes	Yes	Yes	Yes	Yes	No	Defined for TLS 1.2 in RFCs
DH-RSA	No	Yes	Yes	Yes	Yes	No
DHE-RSA (forward secrecy)	No	Yes	Yes	Yes	Yes	Yes
ECDH-RSA	No	No	Yes	Yes	Yes	No
ECDHE-RSA (forward secrecy)	No	No	Yes	Yes	Yes	Yes
DH-DSS	No	Yes	Yes	Yes	Yes	No
DHE-DSS (forward secrecy)	No	Yes	Yes	Yes	Yes	No[34]
ECDH-ECDSA	No	No	Yes	Yes	Yes	No
ECDHE-ECDSA (forward secrecy)	No	No	Yes	Yes	Yes	Yes
PSK	No	No	Yes	Yes	Yes	
PSK-RSA	No	No	Yes	Yes	Yes	
DHE-PSK (forward secrecy)	No	No	Yes	Yes	Yes	
ECDHE-PSK (forward secrecy)	No	No	Yes	Yes	Yes	
SRP	No	No	Yes	Yes	Yes	
SRP-DSS	No	No	Yes	Yes	Yes	
SRP-RSA	No	No	Yes	Yes	Yes	
Kerberos	No	No	Yes	Yes	Yes	
DH-ANON (insecure)	No	Yes	Yes	Yes	Yes	
ECDH-ANON (insecure)	No	No	Yes	Yes	Yes	
GOST R 34.10-94 / 34.10-2001[35]	No	No	Yes	Yes	Yes		Proposed in RFC drafts
Cipher[edit]
See also: Cipher suite, Block cipher, and Cipher security summary

Cipher security against publicly known feasible attacks
Cipher	Protocol version	Status
Type	Algorithm	Nominal strength (bits)	SSL 2.0	SSL 3.0
[n 1][n 2][n 3][n 4]	TLS 1.0
[n 1][n 3]	TLS 1.1
[n 1]	TLS 1.2
[n 1]	TLS 1.3
(Draft)
Block cipher
with
mode of operation	AES GCM[36][n 5]	256, 128	N/A	N/A	N/A	N/A	Secure	Secure	Defined for TLS 1.2 in RFCs
AES CCM[37][n 5]	N/A	N/A	N/A	N/A	Secure	Secure
AES CBC[n 6]	N/A	N/A	Depends on mitigations	Secure	Secure	N/A
Camellia GCM[38][n 5]	256, 128	N/A	N/A	N/A	N/A	Secure	Secure
Camellia CBC[39][n 6]	N/A	N/A	Depends on mitigations	Secure	Secure	N/A
ARIA GCM[40][n 5]	256, 128	N/A	N/A	N/A	N/A	Secure	Secure
ARIA CBC[40][n 6]	N/A	N/A	Depends on mitigations	Secure	Secure	N/A
SEED CBC[41][n 6]	128	N/A	N/A	Depends on mitigations	Secure	Secure	N/A
3DES EDE CBC[n 6][n 7]	112[n 8]	Insecure	Insecure	Insecure	Insecure	Insecure	N/A
GOST 28147-89 CNT[35][n 7]	256	N/A	N/A	Insecure	Insecure	Insecure		Defined in RFC 4357
IDEA CBC[n 6][n 7][n 9]	128	Insecure	Insecure	Insecure	Insecure	N/A	N/A	Removed from TLS 1.2
DES CBC[n 6][n 7][n 9]	56	Insecure	Insecure	Insecure	Insecure	N/A	N/A
40[n 10]	Insecure	Insecure	Insecure	N/A	N/A	N/A	Forbidden in TLS 1.1 and later
RC2 CBC[n 6][n 7]	40[n 10]	Insecure	Insecure	Insecure	N/A	N/A	N/A
Stream cipher	ChaCha20-Poly1305[46][n 5]	256	N/A	N/A	N/A	N/A	Secure	Secure	Defined for TLS 1.2 in RFCs
RC4[n 11]	128	Insecure	Insecure	Insecure	Insecure	Insecure	N/A	Prohibited in all versions of TLS by RFC 7465
40[n 10]	Insecure	Insecure	Insecure	N/A	N/A	N/A
None	Null[n 12]	–	N/A	Insecure	Insecure	Insecure	Insecure	Insecure	Defined for TLS 1.2 in RFCs
Notes
^ a b c d RFC 5746 must be implemented to fix a renegotiation flaw that would otherwise break this protocol.
^ If libraries implement fixes listed in RFC 5746, this violates the SSL 3.0 specification, which the IETF cannot change unlike TLS. Fortunately, most current libraries implement the fix and disregard the violation that this causes.
^ a b the BEAST attack breaks all block ciphers (CBC ciphers) used in SSL 3.0 and TLS 1.0 unless mitigated by the client and/or the server. See § Web browsers.
^ The POODLE attack breaks all block ciphers (CBC ciphers) used in SSL 3.0 unless mitigated by the client and/or the server. See § Web browsers.
^ a b c d e AEAD ciphers (such as GCM and CCM) can be used in only TLS 1.2.
^ a b c d e f g h CBC ciphers can be attacked with the Lucky Thirteen attack if the library is not written carefully to eliminate timing side channels.
^ a b c d e The Sweet32 attack breaks block ciphers with a block size of 64 bits.[42]
^ Although the key length of 3DES is 168 bits, effective security strength of 3DES is only 112 bits,[43] which is below the recommended minimum of 128 bits.[44]
^ a b IDEA and DES have been removed from TLS 1.2.[45]
^ a b c 40 bits strength of cipher suites were designed to operate at reduced key lengths to comply with US regulations about the export of cryptographic software containing certain strong encryption algorithms (see Export of cryptography from the United States). These weak suites are forbidden in TLS 1.1 and later.
^ Use of RC4 in all versions of TLS is prohibited by RFC 7465. (Due RC4 attacks weaken or break RC4 used in SSL/TLS)
^ authentication only, no encryption
Data integrity[edit]
Message authentication code (MAC) is used for data integrity. HMAC is used for CBC mode of block ciphers and stream ciphers. AEAD is used for authenticated encryption such as GCM mode and CCM mode.

Data integrity
Algorithm	SSL 2.0	SSL 3.0	TLS 1.0	TLS 1.1	TLS 1.2	TLS 1.3
(Draft)	Status
HMAC-MD5	Yes	Yes	Yes	Yes	Yes	No	Defined for TLS 1.2 in RFCs
HMAC-SHA1	No	Yes	Yes	Yes	Yes	No
HMAC-SHA256/384	No	No	No	No	Yes	No
AEAD	No	No	No	No	Yes	Yes
GOST 28147-89 IMIT[35]	No	No	Yes	Yes	Yes		Proposed in RFC drafts
GOST R 34.11-94[35]	No	No	Yes	Yes	Yes	
Applications and adoption[edit]
In applications design, TLS is usually implemented on top of Transport Layer protocols, encrypting all of the protocol-related data of protocols such as HTTP, FTP, SMTP, NNTP and XMPP.

Historically, TLS has been used primarily with reliable transport protocols such as the Transmission Control Protocol (TCP). However, it has also been implemented with datagram-oriented transport protocols, such as the User Datagram Protocol (UDP) and the Datagram Congestion Control Protocol (DCCP), usage of which has been standardized independently using the term Datagram Transport Layer Security (DTLS).

Websites[edit]
A prominent use of TLS is for securing World Wide Web traffic between a website and a web browser encoded with the HTTP protocol. This use of TLS to secure HTTP traffic constitutes the HTTPS protocol.[47]

Website protocol support
Protocol
version	Website
support[48]	Security[48][49]
SSL 2.0	3.9% (−0.2%)	Insecure
SSL 3.0	13.9% (−0.4%)	Insecure[50]
TLS 1.0	92.0% (−0.6%)	Depends on cipher[n 1] and client mitigations[n 2]
TLS 1.1	84.9% (+0.4%)	Depends on cipher[n 1] and client mitigations[n 2]
TLS 1.2	88.7% (+0.6%)	Depends on cipher[n 1] and client mitigations[n 2]
TLS 1.3
(Draft)	N/A	
Notes
^ a b c see § Cipher table below
^ a b c see § Web browsers and § Attacks against TLS/SSL sections
Web browsers[edit]
Further information: Comparison of web browsers
As of April 2016, the latest versions of all major web browsers support TLS 1.0, 1.1, and 1.2, and have them enabled by default. However, not all supported Microsoft operating systems support the latest version of IE. Additionally many operating systems currently support multiple versions of IE, but this has changed according to Microsoft's Internet Explorer Support Lifecycle Policy FAQ, "beginning January 12, 2016, only the most current version of Internet Explorer available for a supported operating system will receive technical support and security updates." The page then goes on to list the latest supported version of IE at that date for each operating system. The next critical date would be when an operating system reaches the end of life stage, which is in Microsoft's Windows lifecycle fact sheet.

There are still problems on several browser versions:

TLS 1.1 and 1.2 supported, but disabled by default: Internet Explorer 10 for Server 2012 and Internet Explorer 9 for Server 2008[51]
Mitigations against known attacks are not enough yet:

Mitigations against POODLE attack: Some browsers already prevent fallback to SSL 3.0; however, this mitigation needs to be supported by not only clients, but also servers. Disabling SSL 3.0 itself, implementation of "anti-POODLE record splitting", or denying CBC ciphers in SSL 3.0 is required.
Google Chrome: Complete (TLS_FALLBACK_SCSV is implemented since version 33, fallback to SSL 3.0 is disabled since version 39, SSL 3.0 itself is disabled by default since version 40. Support of SSL 3.0 itself was dropped since version 44.)
Mozilla Firefox: Complete (Support of SSL 3.0 itself is dropped since version 39. SSL 3.0 itself is disabled by default and fallback to SSL 3.0 are disabled since version 34, TLS_FALLBACK_SCSV is implemented since version 35. In ESR, SSL 3.0 itself is disabled by default and TLS_FALLBACK_SCSV is implemented since ESR 31.3.)
Internet Explorer: Partial (Only in version 11, SSL 3.0 is disabled by default since April 2015. Version 10 and older are still vulnerable against POODLE.)
Opera: Complete (TLS_FALLBACK_SCSV is implemented since version 20, "anti-POODLE record splitting", which is effective only with client-side implementation, is implemented since version 25, SSL 3.0 itself is disabled by default since version 27. Support of SSL 3.0 itself will be dropped since version 31.)
Safari: Complete (Only on OS X 10.8 and later and iOS 8, CBC ciphers during fallback to SSL 3.0 is denied, but this means it will use RC4, which is not recommended as well. Support of SSL 3.0 itself is dropped on OS X 10.11 and later and iOS 9.)
Mitigation against RC4 attacks:
Google Chrome disabled RC4 except as a fallback since version 43. RC4 is disabled since Chrome 48.
Firefox disabled RC4 except as a fallback since version 36. Firefox 44 disabled RC4 by default.
Opera disabled RC4 except as a fallback since version 30. RC4 is disabled since Opera 35.
Internet Explorer for Windows 7 / Server 2008 R2 and for Windows 8 / Server 2012 have set the priority of RC4 to lowest and can also disable RC4 except as a fallback through registry settings. Internet Explorer 11 Mobile 11 for Windows Phone 8.1 disable RC4 except as a fallback if no other enabled algorithm works. Edge and IE 11 disable RC4 completely in August 2016.
Mitigation against FREAK attack:
The Android Browser of Android 4 and older are still vulnerable to the FREAK attack.
Internet Explorer 11 Mobile is still vulnerable to the FREAK attack.
Google Chrome, Internet Explorer (desktop), Safari (desktop & mobile), and Opera (mobile) have FREAK mitigations in place.
Mozilla Firefox on all platforms and Google Chrome on Windows were not affected by FREAK.
TLS/SSL support history of web browsers
Browser	Version	Platforms	SSL protocols	TLS protocols	Certificate Support	Vulnerabilities fixed[n 1]	Protocol selection by user
[n 2]
SSL 2.0 (insecure)	SSL 3.0 (insecure)	TLS 1.0	TLS 1.1	TLS 1.2	TLS 1.3 (proposed)	EV
[n 3][52]	SHA-2
[53]	ECDSA
[54]	BEAST[n 4]	CRIME[n 5]	POODLE (SSLv3)[n 6]	RC4[n 7]	FREAK[55][56]	Logjam
Google Chrome
(Chrome for Android)
[n 8]
[n 9]	1–9	Windows (7+)
OS X (10.9+)
Linux
Android (4.1+)
iOS (9.0+)
Chrome OS	Disabled by default	Enabled by default	Yes	No	No	No	Yes
(only desktop)	needs SHA-2 compatible OS[53]	needs ECC compatible OS[54]	Not affected
[61]	Vulnerable
(HTTPS)	Vulnerable	Vulnerable	Vulnerable
(except Windows)	Vulnerable	Yes[n 10]
10–20	No[62]	Enabled by default	Yes	No	No	No	Yes
(only desktop)	needs SHA-2 compatible OS[53]	needs ECC compatible OS[54]	Not affected	Vulnerable
(HTTPS/SPDY)	Vulnerable	Vulnerable	Vulnerable
(except Windows)	Vulnerable	Yes[n 10]
21	No	Enabled by default	Yes	No	No	No	Yes
(only desktop)	needs SHA-2 compatible OS[53]	needs ECC compatible OS[54]	Not affected	Mitigated
[63]	Vulnerable	Vulnerable	Vulnerable
(except Windows)	Vulnerable	Yes[n 10]
22–25	No	Enabled by default	Yes	Yes[64]	No[64][65][66][67]	No	Yes
(only desktop)	needs SHA-2 compatible OS[53]	needs ECC compatible OS[54]	Not affected	Mitigated	Vulnerable	Vulnerable	Vulnerable
(except Windows)	Vulnerable	Temporary
[n 11]
26–29	No	Enabled by default	Yes	Yes	No	No	Yes
(only desktop)	needs SHA-2 compatible OS[53]	needs ECC compatible OS[54]	Not affected	Mitigated	Vulnerable	Vulnerable	Vulnerable
(except Windows)	Vulnerable	Temporary
[n 11]
30–32	No	Enabled by default	Yes	Yes	Yes[65][66][67]	No	Yes
(only desktop)	needs SHA-2 compatible OS[53]	needs ECC compatible OS[54]	Not affected	Mitigated	Vulnerable	Vulnerable	Vulnerable
(except Windows)	Vulnerable	Temporary
[n 11]
33–37	No	Enabled by default	Yes	Yes	Yes	No	Yes
(only desktop)	needs SHA-2 compatible OS[53]	needs ECC compatible OS[54]	Not affected	Mitigated	Partly mitigated
[n 12]	Lowest priority
[70][71][72]	Vulnerable
(except Windows)	Vulnerable	Temporary
[n 11]
38, 39	No	Enabled by default	Yes	Yes	Yes	No	Yes
(only desktop)	Yes	needs ECC compatible OS[54]	Not affected	Mitigated	Partly mitigated	Lowest priority	Vulnerable
(except Windows)	Vulnerable	Temporary
[n 11]
40	No	Disabled by default
[69][73]	Yes	Yes	Yes	No	Yes
(only desktop)	Yes	needs ECC compatible OS[54]	Not affected	Mitigated	Mitigated
[n 13]	Lowest priority	Vulnerable
(except Windows)	Vulnerable	Yes[n 14]
41, 42	No	Disabled by default	Yes	Yes	Yes	No	Yes
(only desktop)	Yes	needs ECC compatible OS[54]	Not affected	Mitigated	Mitigated	Lowest priority	Mitigated	Vulnerable	Yes[n 14]
43	No	Disabled by default	Yes	Yes	Yes	No	Yes
(only desktop)	Yes	needs ECC compatible OS[54]	Not affected	Mitigated	Mitigated	Only as fallback
[n 15][74]	Mitigated	Vulnerable	Yes[n 14]
44–47	No	No[75]	Yes	Yes	Yes	No	Yes
(only desktop)	Yes	needs ECC compatible OS[54]	Not affected	Mitigated	Not affected	Only as fallback
[n 15]	Mitigated	Mitigated[76]	Temporary
[n 11]
48, 49	No	No	Yes	Yes	Yes	No	Yes
(only desktop)	Yes	needs ECC compatible OS[54]	Not affected	Mitigated	Not affected	Disabled by default[n 16][77][78]	Mitigated	Mitigated	Temporary
[n 11]
50–53	No	No	Yes	Yes	Yes	No	Yes
(only desktop)	Yes	Yes	Not affected	Mitigated	Not affected	Disabled by default[n 16][77][78]	Mitigated	Mitigated	Temporary
[n 11]
54–62	63	No	No	Yes	Yes	Yes	Disabled by default (Experimental)	Yes
(only desktop)	Yes	Yes	Not affected	Mitigated	Not affected	Disabled by default[n 16][77][78]	Mitigated	Mitigated	Temporary
[n 11]
Google Android OS Browser
[79]	Android 1.0, 1.1, 1.5, 1.6, 2.0–2.1, 2.2–2.2.3	No	Enabled by default	Yes	No	No	No	Unknown	No	No	Unknown	Unknown	Vulnerable	Vulnerable	Vulnerable	Vulnerable	No
Android 2.3–2.3.7, 3.0–3.2.6, 4.0–4.0.4	No	Enabled by default	Yes	No	No	No	Unknown	Yes[53]	since Android OS 3.0[80]	Unknown	Unknown	Vulnerable	Vulnerable	Vulnerable	Vulnerable	No
Android 4.1–4.3.1, 4.4–4.4.4	No	Enabled by default	Yes	Disabled by default[81]	Disabled by default[81]	No	Unknown	Yes	Yes[54]	Unknown	Unknown	Vulnerable	Vulnerable	Vulnerable	Vulnerable	No
Android 5.0–5.0.2	No	Enabled by default	Yes	Yes[81][82]	Yes[81][82]	No	Unknown	Yes	Yes	Unknown	Unknown	Vulnerable	Vulnerable	Vulnerable	Vulnerable	No
Android 5.1–5.1.1	No	No
[citation needed]	Yes	Yes	Yes	No	Unknown	Yes	Yes	Unknown	Unknown	Not affected	Only as fallback
[n 15]	Mitigated	Mitigated	No
Android 6.0–6.0.1, 7.0–7.1.2, 8.0	No	No
[citation needed]	Yes	Yes	Yes	No	Unknown	Yes	Yes	Unknown	Unknown	Not affected	Disabled by default	Mitigated	Mitigated	No
Android 8.1	No	No
[83]	Yes	Yes	Yes	No	Unknown	Yes	Yes	Unknown	Unknown	Not affected	Disabled by default	Mitigated	Mitigated	No
Browser	Version	Platforms	SSL 2.0 (insecure)	SSL 3.0 (insecure)	TLS 1.0	TLS 1.1	TLS 1.2	TLS 1.3 (proposed)	EV certificate	SHA-2 certificate	ECDSA certificate	BEAST	CRIME	POODLE (SSLv3)	RC4	FREAK	Logjam	Protocol selection by user
Mozilla Firefox
(Firefox for mobile)
[n 17]	1.0	Windows (7+)
OS X (10.9+)
Linux
Android (4.0.3+)
iOS (9.0+)
Firefox OS
Maemo

ESR only for:
Windows (XP SP2+)
OS X (10.9+)
Linux	Enabled by default
[84]	Enabled by default
[84]	Yes[84]	No	No	No	No	Yes[53]	No	Not affected
[85]	Not affected	Vulnerable	Vulnerable	Not affected	Vulnerable	Yes[n 10]
1.5	Enabled by default	Enabled by default	Yes	No	No	No	No	Yes	No	Not affected	Not affected	Vulnerable	Vulnerable	Not affected	Vulnerable	Yes[n 10]
2	Disabled by default
[84][86]	Enabled by default	Yes	No	No	No	No	Yes	Yes[54]	Not affected	Not affected	Vulnerable	Vulnerable	Not affected	Vulnerable	Yes[n 10]
3–7	Disabled by default	Enabled by default	Yes	No	No	No	Yes	Yes	Yes	Not affected	Not affected	Vulnerable	Vulnerable	Not affected	Vulnerable	Yes[n 10]
8–10
ESR 10	No[86]	Enabled by default	Yes	No	No	No	Yes	Yes	Yes	Not affected	Not affected	Vulnerable	Vulnerable	Not affected	Vulnerable	Yes[n 10]
11–14	No	Enabled by default	Yes	No	No	No	Yes	Yes	Yes	Not affected	Vulnerable
(SPDY)[63]	Vulnerable	Vulnerable	Not affected	Vulnerable	Yes[n 10]
15–22
ESR 17.0–17.0.10	No	Enabled by default	Yes	No	No	No	Yes	Yes	Yes	Not affected	Mitigated	Vulnerable	Vulnerable	Not affected	Vulnerable	Yes[n 10]
ESR 17.0.11	No	Enabled by default	Yes	No	No	No	Yes	Yes	Yes	Not affected	Mitigated	Vulnerable	Lowest priority
[87][88]	Not affected	Vulnerable	Yes[n 10]
23	No	Enabled by default	Yes	Disabled by default
[89]	No	No	Yes	Yes	Yes	Not affected	Mitigated	Vulnerable	Vulnerable	Not affected	Vulnerable	Yes[n 18]
24, 25.0.0
ESR 24.0–24.1.0	No	Enabled by default	Yes	Disabled by default	Disabled by default
[90]	No	Yes	Yes	Yes	Not affected	Mitigated	Vulnerable	Vulnerable	Not affected	Vulnerable	Yes[n 18]
25.0.1, 26
ESR 24.1.1	No	Enabled by default	Yes	Disabled by default	Disabled by default	No	Yes	Yes	Yes	Not affected	Mitigated	Vulnerable	Lowest priority
[87][88]	Not affected	Vulnerable	Yes[n 18]
27–33
ESR 31.0–31.2	No	Enabled by default	Yes	Yes[91][92]	Yes[93][92]	No	Yes	Yes	Yes	Not affected	Mitigated	Vulnerable	Lowest priority	Not affected	Vulnerable	Yes[n 18]
34, 35
ESR 31.3–31.7	No	Disabled by default
[94][95]	Yes	Yes	Yes	No	Yes	Yes	Yes	Not affected	Mitigated	Mitigated
[n 19]	Lowest priority	Not affected	Vulnerable	Yes[n 18]
ESR 31.8	No	Disabled by default	Yes	Yes	Yes	No	Yes	Yes	Yes	Not affected	Mitigated	Mitigated	Lowest priority	Not affected	Mitigated[98]	Yes[n 18]
36–38
ESR 38.0	No	Disabled by default	Yes	Yes	Yes	No	Yes	Yes	Yes	Not affected	Mitigated	Mitigated	Only as fallback
[n 15][99]	Not affected	Vulnerable	Yes[n 18]
ESR 38.1–38.8	No	Disabled by default	Yes	Yes	Yes	No	Yes	Yes	Yes	Not affected	Mitigated	Mitigated	Only as fallback
[n 15]	Not affected	Mitigated[98]	Yes[n 18]
39–43	No	No[100]	Yes	Yes	Yes	No	Yes	Yes	Yes	Not affected	Mitigated	Not affected	Only as fallback
[n 15]	Not affected	Mitigated[98]	Yes[n 18]
44–48
ESR 45.0–45.9	No	No	Yes	Yes	Yes	No	Yes	Yes	Yes	Not affected	Mitigated	Not affected	Disabled by default[n 16][101][102][103][104]	Not affected	Mitigated	Yes[n 18]
49–56
ESR 52.0-52.4	ESR 52.5	No	No	Yes	Yes	Yes	Disabled by default (Experimental)[105]	Yes	Yes	Yes	Not affected	Mitigated	Not affected	Disabled by default[n 16]	Not affected	Mitigated	Yes[n 18]
57
Browser	Version	Platforms	SSL 2.0 (insecure)	SSL 3.0 (insecure)	TLS 1.0	TLS 1.1	TLS 1.2	TLS 1.3 (proposed)	EV certificate	SHA-2 certificate	ECDSA certificate	BEAST	CRIME	POODLE (SSLv3)	RC4	FREAK	Logjam	Protocol selection by user
Microsoft Internet Explorer
[n 20]	1.x	Windows 3.1, 95, NT,[n 21][n 22]
Mac OS 7, 8	No SSL/TLS support
2	Yes	No	No	No	No	No	No	No	No	No SSL 3.0 or TLS support	Vulnerable	Vulnerable	Vulnerable	N/A
3	Yes	Yes[108]	No	No	No	No	No	No	No	Vulnerable	Not affected	Vulnerable	Vulnerable	Vulnerable	Vulnerable	Unknown
4, 5	Windows 3.1, 95, 98, NT,[n 21][n 22]
Mac OS 7.1, 8, X,
Solaris, HP-UX	Enabled by default	Enabled by default	Disabled by default
[108]	No	No	No	No	No	No	Vulnerable	Not affected	Vulnerable	Vulnerable	Vulnerable	Vulnerable	Yes[n 10]
6	Windows 98, ME, NT,[n 21] 2000[n 22]	Enabled by default	Enabled by default	Disabled by default
[108]	No	No	No	No	No	No	Vulnerable	Not affected	Vulnerable	Vulnerable	Vulnerable	Vulnerable	Yes[n 10]
6	Windows XP[n 22]	Enabled by default	Enabled by default	Disabled by default	No	No	No	No	Yes
[n 23][109]	No	Mitigated	Not affected	Vulnerable	Vulnerable	Vulnerable	Vulnerable	Yes[n 10]
6	Server 2003[n 22]	Enabled by default	Enabled by default	Disabled by default	No	No	No	No	Yes
[n 23][109]	No	Mitigated	Not affected	Vulnerable	Vulnerable	Mitigated
[112]	Mitigated
[113]	Yes[n 10]
7, 8	Windows XP[n 22]	Disabled by default
[114]	Enabled by default	Yes[114]	No	No	No	Yes	Yes
[n 23][109]	No	Mitigated	Not affected	Vulnerable	Vulnerable	Vulnerable	Vulnerable	Yes[n 10]
7, 8	Server 2003[n 22]	Disabled by default
[114]	Enabled by default	Yes[114]	No	No	No	Yes	Yes
[n 23][109]	No	Mitigated	Not affected	Vulnerable	Vulnerable	Mitigated
[112]	Mitigated
[113]	Yes[n 10]
7, 8, 9	Windows Vista	Disabled by default	Enabled by default	Yes	No	No	No	Yes	Yes	Yes[54]	Mitigated	Not affected	Vulnerable	Vulnerable	Mitigated
[112]	Mitigated
[113]	Yes[n 10]
7, 8[n 24]	9	Server 2008	Disabled by default	Enabled by default	Yes	Disabled by default[51]
(KB4019276)	Disabled by default[51]
(KB4019276)	No	Yes	Yes	Yes[54]	Mitigated	Not affected	Vulnerable	Vulnerable	Mitigated
[112]	Mitigated
[113]	Yes[n 10]
8, 9, 10[n 24]	Windows 7	Disabled by default	Enabled by default	Yes	Disabled by default
[116]	Disabled by default
[116]	No	Yes	Yes	Yes	Mitigated	Not affected	Vulnerable	Lowest priority
[117][n 25]	Mitigated
[112]	Mitigated
[113]	Yes[n 10]
Server 2008 R2
10[n 24]	Windows 8	Disabled by default	Enabled by default	Yes	Disabled by default
[116]	Disabled by default
[116]	No	Yes	Yes	Yes	Mitigated	Not affected	Vulnerable	Lowest priority
[117][n 25]	Mitigated
[112]	Mitigated
[113]	Yes[n 10]
10	Server 2012	Disabled by default	Enabled by default	Yes	Disabled by default
[116]	Disabled by default
[116]	No	Yes	Yes	Yes	Mitigated	Not affected	Vulnerable	Lowest priority
[117][n 25]	Mitigated
[112]	Mitigated
[113]	Yes[n 10]
11	Windows 7	Disabled by default	Disabled by default
[n 26]	Yes	Yes[119]	Yes[119]	No	Yes	Yes	Yes	Mitigated	Not affected	Mitigated
[n 26]	Disabled by default[123]	Mitigated
[112]	Mitigated
[113]	Yes[n 10]
Server 2008 R2
11	Windows 8.1	Disabled by default	Disabled by default
[n 26]	Yes	Yes[119]	Yes[119]	No	Yes	Yes	Yes	Mitigated	Not affected	Mitigated
[n 26]	Disabled by default[n 16]	Mitigated
[112]	Mitigated
[113]	Yes[n 10]
Server 2012 R2
Microsoft Edge[n 27]
and (as fallback)
Internet Explorer[n 20]	IE 11	Edge 12	Windows 10 v1507	Disabled by default	Disabled by default	Yes	Yes	Yes	No	Yes	Yes	Yes	Mitigated	Not affected	Mitigated	Disabled by default[n 16]	Mitigated	Mitigated	Yes[n 10]
IE 11	Windows 10 LTSB 2015 (v1507)[n 28]	Disabled by default	Disabled by default	Yes	Yes	Yes	No	Yes	Yes	Yes	Mitigated	Not affected	Mitigated	Disabled by default[n 16]	Mitigated	Mitigated	Yes[n 10]
IE 11	Edge 13	Windows 10 v1511	Disabled by default	Disabled by default	Yes	Yes	Yes	No	Yes	Yes	Yes	Mitigated	Not affected	Mitigated	Disabled by default[n 16]	Mitigated	Mitigated	Yes[n 10]
IE 11	Edge 14	Windows 10 v1607	No[125]	Disabled by default	Yes	Yes	Yes	No	Yes	Yes	Yes	Mitigated	Not affected	Mitigated	Disabled by default[n 16]	Mitigated	Mitigated	Yes[n 10]
IE 11	Windows 10 LSTB 2016 (v1607)	No[125]	Disabled by default	Yes	Yes	Yes	No	Yes	Yes	Yes	Mitigated	Not affected	Mitigated	Disabled by default[n 16]	Mitigated	Mitigated	Yes[n 10]
IE 11	Server 2016
v1607 (LTSB)	No[125]	Disabled by default	Yes	Yes	Yes	No	Yes	Yes	Yes	Mitigated	Not affected	Mitigated	Disabled by default[n 16]	Mitigated	Mitigated	Yes[n 10]
IE 11	Edge 15	Windows 10 v1703	No	Disabled by default	Yes	Yes	Yes	No	Yes	Yes	Yes	Mitigated	Not affected	Mitigated	Disabled by default[n 16]	Mitigated	Mitigated	Yes[n 10]
IE 11	Edge 16	Windows 10 v1709	No	Disabled by default	Yes	Yes	Yes	No	Yes	Yes	Yes	Mitigated	Not affected	Mitigated	Disabled by default[n 16]	Mitigated	Mitigated	Yes[n 10]
IE 11	Server 2016
v1709 (SAC)	No[125]	Disabled by default	Yes	Yes	Yes	No	Yes	Yes	Yes	Mitigated	Not affected	Mitigated	Disabled by default[n 16]	Mitigated	Mitigated	Yes[n 10]
Microsoft Internet Explorer Mobile
[n 20]	7, 9	Windows Phone 7, 7.5, 7.8	Disabled by default
[114]	Enabled by default	Yes	No
[citation needed]	No
[citation needed]	No	No
[citation needed]	Yes	Yes[80]	Unknown	Not affected	Vulnerable	Vulnerable	Vulnerable	Vulnerable	Only with 3rd party tools[n 29]
10	Windows Phone 8	Disabled by default	Enabled by default	Yes	Disabled by default
[127]	Disabled by default
[127]	No	No
[citation needed]	Yes	Yes[128]	Mitigated	Not affected	Vulnerable	Vulnerable	Vulnerable	Vulnerable	Only with 3rd party tools[n 29]
11	Windows Phone 8.1	Disabled by default	Enabled by default	Yes	Yes[129]	Yes[129]	No	No
[citation needed]	Yes	Yes	Mitigated	Not affected	Vulnerable	Only as fallback
[n 15][130][131]	Vulnerable	Vulnerable	Only with 3rd party tools[n 29]
Microsoft Edge
[n 27]	Edge 13	Windows 10 Mobile v1511	Disabled by default	Disabled by default	Yes	Yes	Yes	No	Yes	Yes	Yes	Mitigated	Not affected	Mitigated	Disabled by default[n 16]	Mitigated	Mitigated	No
Edge 14	Windows 10 Mobile v1607	No[125]	Disabled by default	Yes	Yes	Yes	No	Yes	Yes	Yes	Mitigated	Not affected	Mitigated	Disabled by default[n 16]	Mitigated	Mitigated	No
Edge 15	Windows 10 Mobile v1703	No	Disabled by default	Yes	Yes	Yes	No	Yes	Yes	Yes	Mitigated	Not affected	Mitigated	Disabled by default[n 16]	Mitigated	Mitigated	No
Edge 15	Windows 10 Mobile v1709	No	Disabled by default	Yes	Yes	Yes	No	Yes	Yes	Yes	Mitigated	Not affected	Mitigated	Disabled by default[n 16]	Mitigated	Mitigated	No
Browser	Version	Platforms	SSL 2.0 (insecure)	SSL 3.0 (insecure)	TLS 1.0	TLS 1.1	TLS 1.2	TLS 1.3 (proposed)	EV certificate	SHA-2 certificate	ECDSA certificate	BEAST	CRIME	POODLE (SSLv3)	RC4	FREAK	Logjam	Protocol selection by user
Opera Browser
(Opera Mobile)
(Pre-Presto and Presto)
[n 30]	1–2	Windows
OS X
Linux
Android
Symbian S60
Maemo
Windows Mobile	No SSL/TLS support[133]
3	Yes[134]	No	No	No	No	No	No	No	No	No SSL 3.0 or TLS support	Vulnerable	Unknown	Unknown	N/A
4	Yes	Yes[135]	No	No	No	No	No	No	No	Vulnerable	Not affected	Vulnerable	Vulnerable	Unknown	Unknown	Unknown
5	Enabled by default	Enabled by default	Yes[136]	No	No	No	No	No	No	Vulnerable	Not affected	Vulnerable	Vulnerable	Unknown	Unknown	Yes[n 10]
6–7	Enabled by default	Enabled by default	Yes[136]	No	No	No	No	Yes[53]	No	Vulnerable	Not affected	Vulnerable	Vulnerable	Unknown	Unknown	Yes[n 10]
8	Enabled by default	Enabled by default	Yes	Disabled by default
[137]	No	No	No	Yes	No	Vulnerable	Not affected	Vulnerable	Vulnerable	Unknown	Unknown	Yes[n 10]
9	Disabled by default
[138]	Enabled by default	Yes	Yes	No	No	since v9.5
(only desktop)	Yes	No	Vulnerable	Not affected	Vulnerable	Vulnerable	Unknown	Unknown	Yes[n 10]
10–11.52	No[139]	Enabled by default	Yes	Disabled by default	Disabled by default
[139]	No	Yes
(only desktop)	Yes	No	Vulnerable	Not affected	Vulnerable	Vulnerable	Unknown	Unknown	Yes[n 10]
11.60–11.64	No	Enabled by default	Yes	Disabled by default	Disabled by default	No	Yes
(only desktop)	Yes	No	Mitigated
[140]	Not affected	Vulnerable	Vulnerable	Unknown	Unknown	Yes[n 10]
12–12.14	No	Disabled by default
[n 31]	Yes	Disabled by default	Disabled by default	No	Yes
(only desktop)	Yes	No	Mitigated	Not affected	Mitigated
[n 31]	Vulnerable	Unknown	Mitigated[142]	Yes[n 10]
12.15–12.17	No	Disabled by default	Yes	Disabled by default	Disabled by default	No	Yes
(only desktop)	Yes	No	Mitigated	Not affected	Mitigated	Partly mitigated
[143][144]	Unknown	Mitigated[142]	Yes[n 10]
12.18	No	Disabled by default	Yes	Yes[145]	Yes[145]	No	Yes
(only desktop)	Yes	Yes[145]	Mitigated	Not affected	Mitigated	Disabled by default[n 16][145]	Mitigated[145]	Mitigated[142]	Yes[n 10]
Opera Browser
(Opera Mobile)
(Webkit and Blink)
[n 32]	14–16	Windows (7+)
OS X (10.9+)
Linux
Android (4.0+)	No	Enabled by default	Yes	Yes[148]	No[148]	No	Yes
(only desktop)	needs SHA-2 compatible OS[53]	needs ECC compatible OS[54]	Not affected	Mitigated	Vulnerable	Vulnerable	Vulnerable
(except Windows)	Vulnerable	Temporary
[n 11]
17–19	No	Enabled by default	Yes	Yes[149]	Yes[149]	No	Yes
(only desktop)	needs SHA-2 compatible OS[53]	needs ECC compatible OS[54]	Not affected	Mitigated	Vulnerable	Vulnerable	Vulnerable
(except Windows)	Vulnerable	Temporary
[n 11]
20–24	No	Enabled by default	Yes	Yes	Yes	No	Yes
(only desktop)	needs SHA-2 compatible OS[53]	needs ECC compatible OS[54]	Not affected	Mitigated	Partly mitigated
[n 33]	Lowest priority
[150]	Vulnerable
(except Windows)	Vulnerable	Temporary
[n 11]
25, 26	No	Enabled by default
[n 34]	Yes	Yes	Yes	No	Yes
(only desktop)	Yes	needs ECC compatible OS[54]	Not affected	Mitigated	Mitigated
[n 35]	Lowest priority	Vulnerable
(except Windows)	Vulnerable	Temporary
[n 11]
27	No	Disabled by default
[73]	Yes	Yes	Yes	No	Yes
(only desktop)	Yes	needs ECC compatible OS[54]	Not affected	Mitigated	Mitigated
[n 36]	Lowest priority	Vulnerable
(except Windows)	Vulnerable	Yes[n 37]
(only desktop)
28, 29	No	Disabled by default	Yes	Yes	Yes	No	Yes
(only desktop)	Yes	needs ECC compatible OS[54]	Not affected	Mitigated	Mitigated	Lowest priority	Mitigated	Vulnerable	Yes[n 37]
(only desktop)
30	No	Disabled by default	Yes	Yes	Yes	No	Yes
(only desktop)	Yes	needs ECC compatible OS[54]	Not affected	Mitigated	Mitigated	Only as fallback
[n 15][74]	Mitigated	Mitigated[142]	Yes[n 37]
(only desktop)
31–34	No	No[75]	Yes	Yes	Yes	No	Yes
(only desktop)	Yes	needs ECC compatible OS[54]	Not affected	Mitigated	Not affected	Only as fallback
[n 15][74]	Mitigated	Mitigated	Temporary
[n 11]
35, 36	No	No	Yes	Yes	Yes	No	Yes
(only desktop)	Yes	needs ECC compatible OS[54]	Not affected	Mitigated	Not affected	Disabled by default[n 16][77][78]	Mitigated	Mitigated	Temporary
[n 11]
37–40	No	No	Yes	Yes	Yes	No	Yes
(only desktop)	Yes	Yes	Not affected	Mitigated	Not affected	Disabled by default[n 16][77][78]	Mitigated	Mitigated	Temporary
[n 11]
41–48	49	No	No	Yes	Yes	Yes	Disabled by default (Experimental)	Yes
(only desktop)	Yes	Yes	Not affected	Mitigated	Not affected	Disabled by default[n 16][77][78]	Mitigated	Mitigated	Temporary
[n 11]
Browser	Version	Platforms	SSL 2.0 (insecure)	SSL 3.0 (insecure)	TLS 1.0	TLS 1.1	TLS 1.2	TLS 1.3 (proposed)	EV certificate	SHA-2 certificate	ECDSA certificate	BEAST	CRIME	POODLE (SSLv3)	RC4	FREAK	Logjam	Protocol selection by user
Apple Safari
[n 38]	1	Mac OS X 10.2, 10.3	No[155]	Yes	Yes	No	No	No	No	No	No	Vulnerable	Not affected	Vulnerable	Vulnerable	Vulnerable	Vulnerable	No
2–5	Mac OS X 10.4, 10.5, Win XP	No	Yes	Yes	No	No	No	since v3.2	No	No	Vulnerable	Not affected	Vulnerable	Vulnerable	Vulnerable	Vulnerable	No
3–5	Vista, Win 7	No	Yes	Yes	No	No	No	since v3.2	No	Yes[80]	Vulnerable	Not affected	Vulnerable	Vulnerable	Vulnerable	Vulnerable	No
4–6	Mac OS X 10.6, 10.7	No	Yes	Yes	No	No	No	Yes	Yes[53]	Yes[54]	Vulnerable	Not affected	Vulnerable	Vulnerable	Vulnerable	Vulnerable	No
6	OS X 10.8	No	Yes	Yes	No	No	No	Yes	Yes	Yes[54]	Mitigated
[n 39]	Not affected	Mitigated
[n 40]	Vulnerable
[n 40]	Mitigated
[161]	Vulnerable	No
7, 9	OS X 10.9	No	Yes	Yes	Yes[162]	Yes[162]	No	Yes	Yes	Yes	Mitigated
[157]	Not affected	Mitigated
[n 40]	Vulnerable
[n 40]	Mitigated
[161]	Vulnerable	No
8–10	OS X 10.10	No	Yes	Yes	Yes	Yes	No	Yes	Yes	Yes	Mitigated	Not affected	Mitigated
[n 40]	Lowest priority
[163][n 40]	Mitigated
[161]	Mitigated
[164]	No
9, 10	11	OS X 10.11	No	No	Yes	Yes	Yes	No	Yes	Yes	Yes	